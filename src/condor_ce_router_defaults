#!/usr/bin/python

import os
import re
import pwd

try:
    import classad
except ImportError:
    classad = None

# This is part of the classad module as of HTCondor 8.1.2
def quote(value):
    ad = classad.ClassAd()
    ad["foo"] = str(value)
    return ad.lookup("foo").__str__()
try:
    quote = classad.quote
except:
    pass

job_router_defaults = \
"""
JOB_ROUTER_DEFAULTS = \\
  [ \\
    MaxIdleJobs = 2000; \\
    MaxJobs = 10000; \\
    /* by default, accept all jobs */ \\
    Requirements = True; \\
    \\
    /* now modify routed job attributes */ \\
    /* remove routed job if the client disappears for 48 hours or it is idle for 6 */ \\
    /*set_PeriodicRemove = (LastClientContact - time() > 48*60*60) || \\
                         (JobStatus == 1 && (time() - QDate) > 6*60);*/ \\
    delete_CondorCE = true; \\
    set_RoutedJob = true; \\
    copy_environment = orig_environment; \\
    set_osg_environment = "@osg_environment@"; \\
    eval_set_environment = \\
        ifThenElse(orig_environment is undefined, osg_environment, \\
          strcat(osg_environment, " ", orig_environment) \\
        ); \\
    \\
    /* Set new requirements */ \\
    /* set_requirements = LastClientContact - time() < 30*60; */ \\
    set_requirements = True; \\
    set_InputRSL = ifThenElse(GlobusRSL is null, [], eval_rsl(GlobusRSL)); \\
    eval_set_RequestMemory = ifThenElse(InputRSL.max_memory isnt null, InputRSL.max_memory, 2000); \\
    eval_set_RequestCpus = ifThenElse(InputRSL.count isnt null, InputRSL.count, 1); \\
    eval_set_remote_queue = ifThenElse(InputRSL.queue isnt null, InputRSL.queue, ""); \\
    /* If remote_cerequirements is a string, BLAH will parse it as an expression before examining it */ \\
    eval_set_remote_cerequirements = ifThenElse(InputRSL.maxTime isnt null, strcat("Walltime == ", string(60*InputRSL.maxTime), " && CondorCE == 1"), "CondorCE == 1"); \\
    eval_set_AccountingGroup = @accounting_group@ \\
  ]
"""

osg_environment_files = [ \
    "/var/lib/osg/osg-job-environment.conf",
    "/var/lib/osg/osg-local-job-environment.conf"    
]

def parse_extattr():
    if not os.path.exists("/etc/osg/extattr_table.txt"):
        return []
    fd = open("/etc/osg/extattr_table.txt")
    results = []
    for line in fd:
        if line.startswith("#"):
            continue
        line = line.strip()
        if not line:
            continue
        info = line.split(" ", 1)
        if len(info) != 2:
            continue
        results.append(info)
    return results
        

def parse_uids():
    if not os.path.exists("/etc/osg/uid_table.txt"):
        return []
    fd = open("/etc/osg/uid_table.txt")
    results = []
    for line in fd:
        if line.startswith("#"):
            continue
        line = line.strip()
        if not line:
            continue
        info = line.split(" ", 1)
        if len(info) != 2:
            continue
        try:
            uid = int(info[0])
            results.append( (pwd.getpwuid(uid).pw_name, info[1]) )
        except ValueError:
            results.append(info)
    return results

def set_accounting_group():
    attr_mappings = parse_extattr()
    uid_mappings = parse_uids()
    if (not classad) or (not attr_mappings and not uid_mappings):
        return "Owner"
    accounting_group_str = ''
    for mapping in uid_mappings:
        accounting_group_str += 'ifThenElse(Owner == %s, strcat(%s, ".", Owner), ' % (classad.quote(mapping[0]), classad.quote(mapping[1]))
    for mapping in attr_mappings:
        accounting_group_str += 'ifThenElse(regexp(%s, x509UserProxyFirstFQAN), strcat(%s, ".", Owner), ' % (classad.quote(mapping[0]), classad.quote(mapping[1]))
    accounting_group_str += "Owner " + ")"*(len(attr_mappings)+len(uid_mappings))
    return accounting_group_str

def condor_env_escape(val):
    """
    Escape the environment variable to match Condor's escape sequence.

    From condor_submit's man page:
    1 Put double quote marks around the entire argument string. Any literal 
      double quote marks within the string must be escaped by repeating the 
      double quote mark.
    2 Use white space (space or tab characters) to separate environment
      entries.
    3 To put any white space in an environment entry, surround the space and 
      as much of the surrounding entry as desired with single quote marks.
    4 To insert a literal single quote mark, repeat the single quote mark 
      anywhere inside of a section surrounded by single quote marks.

    THIS IS NOT A GENERIC ESCAPER; we assume this only works on the OSG
    environment file format.  We also assume the input is valid.
    """
    if val.startswith('"') and val.endswith('"'):
        val = val[1:-1]
    val = val.replace('\\', '') # Nuke escape sequences.
    val = val.replace('"', '""')
    val = val.replace("'", "''")
    return "'" + val + "'"

export_line_re = re.compile("^export\s+([a-zA-Z_]\w*)")
variable_line_re = re.compile("([a-zA-Z_]\w*)=(.+)")
def read_osg_environment_file(filename):
    """
    Parse the OSG environment file.

    This file is maddening because it APPEARS to be a file you can source
    with bash; however, it has a very limited syntax.
    """
    fd = open(filename, 'r')
    export_lines = []
    env = {}
    for line in fd.readlines():
        line = line.strip()
        # Ignore comments
        if line.startswith("#"):
            continue
        m = export_line_re.match(line)
        if m:
            export_lines.append(m.group(1))
        m = variable_line_re.match(line)
        if m:
            env[m.group(1)] = condor_env_escape(m.group(2))
    return dict([(i[0], i[1]) for i in env.items() if i[0] in export_lines])

def main():
    master_env = {}
    env_file_contents = []
    # Read in the environment files.
    for filename in osg_environment_files:
        if os.path.exists(filename) and os.access(filename, os.R_OK):
            env_file_contents.append(read_osg_environment_file(filename))
    # Merge the file contents, in order
    for contents in env_file_contents:
        for key, val in contents.items():
            master_env[key] = val
    # Mangle environment string
    env_string = " ".join(["%s=%s" % (i[0], i[1]) for i in master_env.items()])

    accounting_group_str = set_accounting_group()

    print job_router_defaults.replace("@osg_environment@", env_string).replace("@accounting_group@", accounting_group_str)

if __name__ == "__main__":
    main()

